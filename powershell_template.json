{
	"PM Function": {
		"prefix": "[PM] Function",
		"body": [
			"function ${1:Verb}-${2:Noun} {",
				"\t[CmdletBinding(${3:SupportsShouldProcess})]",
				"\t",
				"\tparam (",
				"\t\t$0",
				"\t)",
				"\t",
				"\tbegin {",
				"\t\tSet-StrictMode -Version 3",
				"\t}",
				"\t",
				"\tprocess {",
				"\t\t",
				"\t}",
				"\t",
				"\tend {}",
			"}"
		],
		"description": "Function Block"
	},

	"PM Parameter": {
		"prefix": "[PM] Parameter",
		"body": [
			"[Parameter(${7:Mandatory}${6:,",
			"\t\t   Position=${1:Int}}${5:,",
			"\t\t   ValueFromPipeline}${4:,",
			"\t\t   ValueFromPipelineByPropertyName}${3:,",
			"\t\t   ParameterSetName='${2:String}'})]",
			"${8:[Alias('String1', 'String2')]",
			"[ValidateNotNull()]",
			"[ValidateNotNullOrEmpty()]",
			"[ValidateSet('String1', 'String2')]",
			"[ValidateCount(Int_min, Int_max)]",
			"[ValidateLength(Int_min, Int_max)]",
			"[ValidateRange(Int_min, Int_max)]",
			"[ValidatePattern('RegexPattern')]",
			"[ValidateScript({Expression\\})]",
			"[AllowNull()]",
			"[AllowEmptyString()]",
			"[AllowEmptyCollection()]",
			"}[${9:Type}${10:[]}]\\$${11:Name}$0"
		],
		"description": "Parameter Block"
	},

	"PM Parameter Short": {
		"prefix": "[PM] Parameter Short",
		"body": [
			"[Parameter()]",
			"[${1:Type}${2:[]}]\\$${3:Name}$0"
		],
		"description": "Short Parameter Block"
	},

	"PM Synopsis": {
		"prefix": "[PM] Synopsis",
		"body": [
			"<#",
			".SYNOPSIS",
			"Short description",
			"",
			".DESCRIPTION",
			"Long description",
			"",
			".PARAMETER ParameterName",
			"Short description of a Parameter",
			"",
			".PARAMETER ParameterName",
			"Another short description of a Parameter",
			"",
			".EXAMPLE",
			"Example of how to use this cmdlet",
			"",
			".EXAMPLE",
			"Another example of how to use this cmdlet",
			"",
			".INPUTS",
			"Inputs to this cmdlet (if any)",
			"",
			".OUTPUTS",
			"Output from this cmdlet (if any)",
			"",
			".NOTES",
			"Author:\t\t\tPhilipp Maier",
			"Author Git:\t\thttps://github.com/philmphdev",
			"",
			".LINK",
			"$1",
			"#>",
			"",
			"$0"
		],
		"description": "Synopsis Block"
	},

	"PM Synopsis Empty": {
		"prefix": "[PM] Synopsis Empty",
		"body": [
			"<#",
			".SYNOPSIS",
			"Short description",
			"",
			".DESCRIPTION",
			"Long description",
			"",
			".PARAMETER ParameterName",
			"Short description of a Parameter",
			"",
			".PARAMETER ParameterName",
			"Another short description of a Parameter",
			"",
			".EXAMPLE",
			"Example of how to use this cmdlet",
			"",
			".EXAMPLE",
			"Another example of how to use this cmdlet",
			"",
			".INPUTS",
			"Inputs to this cmdlet (if any)",
			"",
			".OUTPUTS",
			"Output from this cmdlet (if any)",
			"",
			".NOTES",
			"Author:\t\t\t$1",
			"Author Git:\t\t$2",
			"Company:\t\t$3",
			"",
			".LINK",
			"$4",
			"#>",
			"",
			"$0"
		],
		"description": "Empty Synopsis Block"
	},

	"PM File Synopsis": {
		"prefix": "[PM] File Synopsis",
		"body": [
			"${3:#Requires -Version ${1}",
			"}${2:#Requires -RunAsAdministrator",
			"}",
			"<#",
			"#################################################################",
			"Author:\t\t\t\tPhilipp Maier",
			"Author Git:\t\t\thttps://github.com/philmph",
			"",
			"Notes & Usage:",
			"$4${6:",
			"",
			"Link:\t\t\t\t$5}",
			"#################################################################",
			"#>",
			"",
			"$0"
		],
		"description": "Synopsis File Block"
	},

	"PM File Synopsis Empty": {
		"prefix": "[PM] File Synopsis Empty",
		"body": [
			"${3:#Requires -Version ${1}",
			"}${2:#Requires -RunAsAdministrator",
			"}",
			"<#",
			"#################################################################",
			"Author:\t\t\t\t$4",
			"Author Git:\t\t\t$5",
			"Company:\t\t\t$6",
			"",
			"Notes & Usage:",
			"$7${9:",
			"",
			"Link:\t\t\t\t$8}",
			"#################################################################",
			"#>",
			"",
			"$0"
		],
		"description": "Empty Synopsis File Block"
	},

	"PM Requires RunAsAdministrator": {
		"prefix": "[PM] Requires RunAsAdministrator",
		"body": [
			"#Requires -RunAsAdministrator"
		],
		"description": "RunAsAdministrator for File"
	},

	"PM Requires Version": {
		"prefix": "[PM] Requires Version",
		"body": [
			"#Requires -Version $1"
		],
		"description": "Version for File"
	},

	"PM foreach": {
		"prefix": "[PM] foreach",
		"body": [
			"foreach (\\$$1 in $2) {",
			"\t$0",
			"}",
			""
		],
		"description": "foreach Block"
	},

	"PM for": {
		"prefix": "[PM] for",
		"body": [
			"for (\\$$1 = $2; \\$$1 -lt $3; \\$$1++) {",
			"\t$0",
			"}",
			""
		],
		"description": "for Block"
	},

	"PM while": {
		"prefix": "[PM] while",
		"body": [
			"while ($1) {",
			"\t$0",
			"}",
			""
		],
		"description": "while Block"
	},

	"PM PSCustomObject": {
		"prefix": "[PM] PSCustomObject",
		"body": [
			"[PSCustomObject] @{",
			"\t$1 = $2$0",
			"}",
			""
		],
		"description": "PSCustomObject Block"
	},

	"PM Class": {
		"prefix": "[PM] Class",
		"body": [
			"class ${1:ClassName}",
			"{",
			"\t[${2:Type[]}]\\$${3:Name}",
			"",
			"\t# Default empty constructor",
			"\t${1:ClassName} () {}",
			"",
			"\t# Constructor with overloads",
			"\t${1:ClassName} ([${2:Type[]}]\\$${3:Name}) {",
			"\t\t\\$this.${3:Name} = \\$${3:Name}",
			"\t}",
			"",
			"\t# Example method void",
			"\t[void] ConvertNameToUpper () {",
			"\t\t\\$this.${3:Name} = (\\$this.${3:Name}).ToUpper()",
			"\t}",
			"",
			"\t# Example method with return",
			"\t[string] NameToUpper () {",
			"\t\treturn (\\$this.${3:Name}).ToUpper()",
			"\t}",
			"}",
			"",
			"$0"
		],
		"description": "Class Block"
	},

	"PM List": {
		"prefix": "[PM] List",
		"body": [
			"\\$${1:Name} = [System.Collections.Generic.List[${2:Type}]]::new()",
			"$0"
		],
		"description": "List"
	},

	"PM List (pwsh 3.0)": {
		"prefix": "[PM] List (pwsh 3.0)",
		"body": [
			"\\$${1:Name} = New-Object -TypeName System.Collections.Generic.List[${2:Type}]",
			"$0"
		],
		"description": "List (pwsh 3.0)"
	},

	"PM ArrayList (deprecated)": {
		"prefix": "[PM] ArrayList (deprecated)",
		"body": [
			"<# Deprecated: Use Generic List - https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netcore-3.1",
			"We don't recommend that you use the ArrayList class for new development.",
			"Instead, we recommend that you use the generic List<T> class.",
			"The ArrayList class is designed to hold heterogeneous collections of objects. #>",
			"\\$${1:Name} = [System.Collections.ArrayList]::new()",
			"$0"
		],
		"description": "ArrayList (deprecated)"
	},

	"PM ArrayList (deprecated; pwsh 3.0)": {
		"prefix": "[PM] ArrayList (deprecated; pwsh 3.0)",
		"body": [
			"<#",
			"Deprecated: Use Generic List - https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netcore-3.1",
			"'We don't recommend that you use the ArrayList class for new development.",
			"Instead, we recommend that you use the generic List<T> class.",
			"The ArrayList class is designed to hold heterogeneous collections of objects.'",
			"#>",
			"\\$${1:Name} = New-Object -TypeName 'System.Collections.ArrayList'",
			"$0"
		],
		"description": "ArrayList (deprecated; pwsh 3.0)"
	},

	"PM try catch": {
		"prefix": "[PM] try catch",
		"body": [
			"try {",
			"\t$0",
			"}",
			"catch {",
			"\t",
			"}",
			""
		],
		"description": "try catch Block"
	}
}