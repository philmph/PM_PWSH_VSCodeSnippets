{
	"PM Function": {
		"prefix": "[PM] Function",
		"body": [
			"function ${1:Verb}-${2:Noun}",
			"{",
				"\t[CmdletBinding(${3:SupportsShouldProcess=\\$true})]",
				"\t",
				"\tparam (",
				"\t\t$0",
				"\t)",
				"\t",
				"\tbegin {",
				"\t\tSet-StrictMode -Version 3",
				"\t}",
				"\t",
				"\tprocess {",
				"\t\t",
				"\t}",
				"\t",
				"\tend {}",
			"}"
		],
		"description": "Function Block"
	},

	"PM Short Parameter": {
		"prefix": "[PM] Parameter",
		"body": [
			"[Parameter()]",
			"[${1:Type[]}]\\$${2:Name}$0"
		],
		"description": "Short Parameter Block"
	},

	"PM Parameter": {
		"prefix": "[PM] Parameter",
		"body": [
			"[Parameter(${1:Mandatory=\\$true,",
			"\t\t   }${2:ValueFromPipeline=\\$true,",
			"\t\t   }${3:ValueFromPipelineByPropertyName=\\$true,",
			"\t\t   }${4:Position=Int,",
			"\t\t   ParameterSetName='String'})]",
			"${5:[Alias('String')]",
			"[ValidateNotNull()]",
			"[ValidateNotNullOrEmpty()]",
			"[ValidateSet('String1', 'String2')]",
			"[ValidateCount(Int_min, Int_max)]",
			"[ValidateLength(Int_min, Int_max)]",
			"[ValidateRange(Int_min, Int_max)]",
			"[ValidatePattern('RegexPattern')]",
			"[ValidateScript(\\{Expression\\})]",
			"[AllowNull()]",
			"[AllowEmptyString()]",
			"[AllowEmptyCollection()]",
			"}[${6:Type[]}]\\$${7:Name}$0"
		],
		"description": "Parameter Block"
	},

	"PM Synopsis": {
		"prefix": "[PM] Synopsis",
		"body": [
			"<#",
			".SYNOPSIS",
			"Short description",
			"",
		 	".DESCRIPTION",
			"Long description",
			"",
			".PARAMETER ParameterName",
			"Short description of a Parameter",
			"",
			".PARAMETER ParameterName",
			"Another short description of a Parameter",
			"",
			".EXAMPLE",
			"Example of how to use this cmdlet",
			"",
			".EXAMPLE",
			"Another example of how to use this cmdlet",
			"",
			".INPUTS",
			"Inputs to this cmdlet (if any)",
			"",
			".OUTPUTS",
			"Output from this cmdlet (if any)",
			"",
			".NOTES",
			"Author:\t\t\tPhilipp Maier",
			"Author Git:\t\t${1:https://github.com/philmph}",
			"Repository:\t\t$2",
			"",
			"Creationdate:\t$3",
			"Version:\t\t1.0",
			"#>",
			"",
			"$0"
		],
		"description": "Synopsis Block"
	},

	"PM Empty Synopsis": {
		"prefix": "[PM] Empty Synopsis",
		"body": [
			"<#",
			".SYNOPSIS",
			"Short description",
			"",
		 	".DESCRIPTION",
			"Long description",
			"",
			".PARAMETER ParameterName",
			"Short description of a Parameter",
			"",
			".PARAMETER ParameterName",
			"Another short description of a Parameter",
			"",
			".EXAMPLE",
			"Example of how to use this cmdlet",
			"",
			".EXAMPLE",
			"Another example of how to use this cmdlet",
			"",
			".INPUTS",
			"Inputs to this cmdlet (if any)",
			"",
			".OUTPUTS",
			"Output from this cmdlet (if any)",
			"",
			".NOTES",
			"Author:\t\t\t$1",
			"Author Git:\t\t$2",
			"Repository:\t\t$3",
			"Company:\t\t$4",
			"",
			"Creationdate:\t$5",
			"Version:\t\t1.0",
			"#>",
			"",
			"$0"
		],
		"description": "Empty Synopsis Block"
	},

	"PM Synopsis File": {
		"prefix": "[PM] Synopsis File",
		"body": [
			"${1:#Requires -Version ",
			"#Requires -RunAsAdministrator",
			"",
			"}<#",
			"################################################################################",
			"Author:\t\t\t\tPhilipp Maier",
			"Author Git:\t\t\thttps://github.com/philmph",
			"Repository:\t\t\t$2",
			"",
			"Filename:\t\t\t$3",
			"Creationdate:\t\t$4",
			"Version:\t\t\t1.0",
			"",
			"Notes & Usage:",
			"$5",
			"################################################################################",
			"#>",
			"",
			"$0"
		],
		"description": "Synopsis File Block"
	},

	"PM Empty Synopsis File": {
		"prefix": "[PM] Empty Synopsis File",
		"body": [
			"${1:#Requires -Version ",
			"#Requires -RunAsAdministrator",
			"",
			"}<#",
			"################################################################################",
			"Author:\t\t\t\t$2",
			"Author Git:\t\t\t$3",
			"Repository:\t\t\t$4",
			"Company:\t\t\t$5",
			"",
			"Filename:\t\t\t$6",
			"Creationdate:\t\t$7",
			"Version:\t\t\t1.0",
			"",
			"Notes & Usage:",
			"$8",
			"################################################################################",
			"#>",
			"",
			"$0"
		],
		"description": "Empty Synopsis File Block"
	},

	"PM Requires RunAsAdministrator": {
		"prefix": "[PM] Requires RunAsAdministrator",
		"body": [
			"#Requires -RunAsAdministrator",
			"",
			"$0"
		],
		"description": "RunAsAdministrator for File"
	},

	"PM foreach": {
		"prefix": "[PM] foreach",
		"body": [
			"foreach (\\$$1 in $2) {",
			"\t$0",
			"}",
			""
		],
		"description": "foreach Block"
	},

	"PM for": {
		"prefix": "[PM] for",
		"body": [
			"for (\\$$1 = $2; \\$$1 -lt $3; \\$$1++) {",
			"\t$0",
			"}",
			""
		],
		"description": "for Block"
	},

	"PM while": {
		"prefix": "[PM] while",
		"body": [
			"while ($1) {",
			"\t$0",
			"}",
			""
		],
		"description": "while Block"
	},

	"PM PSCustomObject": {
		"prefix": "[PM] PSCustomObject",
		"body": [
			"[PSCustomObject] @{",
			"\t$1 = $0",
			"}",
			""
		],
		"description": "PSCustomObject Block"
	},

	"PM Class": {
		"prefix": "[PM] Class",
		"body": [
			"class ${1:ClassName}",
			"{",
			"\t[${2:Type[]}]\\$${3:Name}",
			"",
			"\t# Default empty constructor",
			"\t${1:ClassName} () {}",
			"",
			"\t# Constructor with overloads",
			"\t${1:ClassName} ([${2:Type[]}]\\$${3:Name}) {",
			"\t\t\\$this.${3:Name} = \\$${3:Name}",
			"\t}",
			"",
			"\t# Example method void",
			"\t[void] ConvertNameToUpper () {",
			"\t\t\\$this.${3:Name} = (\\$this.${3:Name}).ToUpper()",
			"\t}",
			"",
			"\t# Example method with return",
			"\t[string] NameToUpper () {",
			"\t\treturn (\\$this.${3:Name}).ToUpper()",
			"\t}",
			"}",
			"",
			"$0"
		],
		"description": "Class Block"
	},

	"PM List": {
		"prefix": "[PM] List",
		"body": [
			"\\$${1:Name} = [System.Collections.Generic.List[${2:Type}]]::new()",
			"$0"
		],
		"description": "List"
	},

	"PM ArrayList": {
		"prefix": "[PM] ArrayList",
		"body": [
			"\\$${1:Name} = [System.Collections.ArrayList]::new()",
			"$0"
		],
		"description": "ArrayList"
	},

	"PM List (pwsh 3.0)": {
		"prefix": "[PM] List",
		"body": [
			"\\$${1:Name} = New-Object -TypeName System.Collections.Generic.List[${2:Type}]",
			"$0"
		],
		"description": "List"
	},

	"PM ArrayList (pwsh 3.0)": {
		"prefix": "[PM] ArrayList",
		"body": [
			"\\$${1:Name} = New-Object -TypeName 'System.Collections.ArrayList'",
			"$0"
		],
		"description": "ArrayList"
	},

	"PM try catch": {
		"prefix": "[PM] try catch",
		"body": [
			"try {",
			"\t$0",
			"} catch {",
			"\t",
			"}",
			""
		],
		"description": "try catch Block"
	}
}